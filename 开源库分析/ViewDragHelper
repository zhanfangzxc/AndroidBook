###ViewDragHelper

- 创建实例

```
ViewDragHelper mDragger = ViewDragHelper.create(this,1.0f,new ViewDragHelper.Callback(){

});

//第一个参数代表当前的ViewGroup
//第二个参数就是sensitivity,主要用于touchSlop:
helper.mTouchSlop = (int)(helper.mTouchSlop * (1/sensitivity))
//第三个参数就是Callback
```
- ViewDragHelper.Callback的相关方法

```
1、tryCatureView:如果返回true则表示可以捕获该view，你可以根据传入的第一个view参数决定哪些可以捕获

2、clampViewPositionHotizontal,clampViewPositionVertical可以在该方法中对child移动的边界进行控制，left，top分别为即将移动到的位置
```
- ViewDragHelper还能做以下的一些操作：

```
1、边界检测，加速度检测
2、回掉Drag Release
3、移动到某个特定的位置
```
示例代码

```
public class VDHLayout  extends LinearLayout{
	private ViewDragHelper mDragger;
	private View mDragView;
	private View mAutoBackView;
	private View mEdgeTrackerView;
	
	private Point mAutoBackOriginPos = new Point();
	public VDHLayout(Context context,AttributeSet attrs){
		super(context,attrs);
		mDragger = ViewDragHelper.create(this,1.0f,new ViewDragHelper.Callback(){
			@Override
			public boolean tryCaptureView(View child,int pointerId){
				return child==mDragView || child == mAutoBackView;
			}
			
			@Override
			public int clampViewPositionHorizontal(View child,int left,int dx){
				return left;
			}
			@Override
			public int clampViewPositionVertical(View child,int top,int dy){
				return top;
			}
			
			//手指释放的时候回调
			@Override
			public void onViewReleased(View releasedChild,float xvel,float yvel){
				if(releasedChild == mAutoBackView){
					mDragger.settleCapturedViewAt(mAutoBackOriginPos.x,mAutoBackOrigin.y);
					invalidate();
				}
			}
			
			//在边界拖动时回调
			@Override
			public void onEdgeDragStarted(int edgeFlags,int pointerId){
				mDragger.captureChildView(mEdgeTrackerView,pointerId);
			}
		});
		mDragger.setEdgeTrackingEnabled(ViewDragHelper.EDGE_LEFT);
	}
	
	@Override
	public boolean onInterceptTouchEvent(MotionEvent event){
		return mDragger.shouldInterceptTouchEvent(event);
	}
	
	@Override
	public boolean onTouchEvent(MotionEvent event){
		mDragger.processTouchEvent(event);
		return true;
	}
	
	@Override
	public void computeScroll(){
		if(mDragger.continueSetting(true)){
			invalidate();
		}
	}
	
	@Override
	protected void onLayout(boolean changed,int l,int t,int r,int b){
		super.onLayout(changed,l,t,r,b);
		mAudioBackOriginPos.x = mAutoBackView.getLeft();
		mAudioBackOriginPos.y = mAutoBackView.getTop();
	}
	
	@Override
	protected void onFinishInflate(){
		super.onFinishInflate();
		mDragView = getChildAt(0);
		mAutoBackView = getChildAt(1);
		mEdgeTrackerView = getChildAt(2);
	}
}
```

- 如果用Button测试或者给TextView添加了clickable＝true，需要重写下面两个方法

```
@Override
public int getViewHorizontalDragRange(View child){
	return getMeasuredWidth()-child.getMeasuredWidth();
}

@Override
public int getViewVerticalDragRange(View child){
	return getMeasuredHeight()-child.getMeasuredHeight();
}

//方法返回的值都是该childView横向或者纵向的移动范围，如果当前只有一个方向移动，可以只复写一个。

```

```
//其他回调方法

onViewDragStateChanged：
```